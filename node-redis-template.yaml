kind: BuildConfig
apiVersion: build.openshift.io/v1
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  managedFields:
    - manager: oc.exe
      operation: Update
      apiVersion: build.openshift.io/v1
      fieldsType: FieldsV1
    - manager: openshift-apiserver
      operation: Update
      apiVersion: build.openshift.io/v1
      fieldsType: FieldsV1   
  labels:
    app: ${NAME}
    app.kubernetes.io/component: ${NAME}
    app.kubernetes.io/instance: ${NAME}
spec:
  nodeSelector: null
  output:
    to:
      kind: ImageStreamTag
      name: '${NAME}:latest'
  resources: {}
  successfulBuildsHistoryLimit: 5
  failedBuildsHistoryLimit: 5
  strategy:
    type: Docker
    dockerStrategy:
      from:
        kind: ImageStreamTag
        namespace: openshift
        name: 'nodejs:latest'
  postCommit: {}
  source:
    type: Git
    git:
      uri: 'https://github.com/mariaelisacf/${NAME}'
    contextDir: 
  runPolicy: Serial
status:
  lastVersion: 1


kind: Deployment
apiVersion: apps/v1
metadata:
  annotations:
    deployment.kubernetes.io/revision: '2'
    image.openshift.io/triggers: >-
      [{"from":{"kind":"ImageStreamTag","name":"${NAME}:latest"},"fieldPath":"spec.template.spec.containers[?(@.name==\"${NAME}\")].image"}]
    openshift.io/generated-by: OpenShiftNewApp
  generation: 2
  managedFields:
    - manager: oc.exe
      operation: Update
      apiVersion: apps/v1
      time: '2021-05-20T17:11:18Z'
      fieldsType: FieldsV1
        
    - manager: openshift-controller-manager
      operation: Update
      apiVersion: apps/v1
      time: '2021-05-20T17:11:18Z'
      fieldsType: FieldsV1

    - manager: kube-controller-manager
      operation: Update
      apiVersion: apps/v1
      time: '2021-05-20T17:11:38Z'
      fieldsType: FieldsV1
  labels:
    app: ${NAME}
    app.kubernetes.io/component: ${NAME}
    app.kubernetes.io/instance: ${NAME}
spec:
  replicas: 1
  selector:
    matchLabels:
      deployment: ${NAME}
  template:
    metadata:
      creationTimestamp: null
      labels:
        deployment: ${NAME}
      annotations:
        openshift.io/generated-by: OpenShiftNewApp
    spec:
      containers:
        - name: ${NAME}
          ports:
            - containerPort: 8080
              protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
status:
  observedGeneration: 2
  replicas: 1
  updatedReplicas: 1
  unavailableReplicas: 1
  conditions:
    - type: Progressing
      status: 'True'
      reason: NewReplicaSetAvailable
      message: ReplicaSet "${NAME}" has successfully progressed.
    - type: Available
      status: 'False'
      reason: MinimumReplicasUnavailable
      message: Deployment does not have minimum availability.

kind: Service
apiVersion: v1
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftNewApp
  managedFields:
    - manager: oc.exe
      operation: Update
      apiVersion: v1
      fieldsType: FieldsV1
  namespace: integracion
  labels:
    app: ${NAME}
spec:
  ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080
  selector:
    app: ${NAME}
    deploymentconfig: ${NAME}
  clusterIP: 
  type: ClusterIP
  sessionAffinity: None
status:
  loadBalancer: {}

